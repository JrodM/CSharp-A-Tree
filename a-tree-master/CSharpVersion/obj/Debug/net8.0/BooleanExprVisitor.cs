//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\jared\Downloads\a-tree-master\a-tree-master\CSharpVersion\Parser\BooleanExpr.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="BooleanExprParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public interface IBooleanExprVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="BooleanExprParser.parse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParse([NotNull] BooleanExprParser.ParseContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="BooleanExprParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpression([NotNull] BooleanExprParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalExpression</c>
	/// labeled alternative in <see cref="BooleanExprParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalExpression([NotNull] BooleanExprParser.LogicalExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="BooleanExprParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotExpression([NotNull] BooleanExprParser.NotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PredicateExpression</c>
	/// labeled alternative in <see cref="BooleanExprParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPredicateExpression([NotNull] BooleanExprParser.PredicateExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ComparisonPredicate</c>
	/// labeled alternative in <see cref="BooleanExprParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparisonPredicate([NotNull] BooleanExprParser.ComparisonPredicateContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>SetPredicate</c>
	/// labeled alternative in <see cref="BooleanExprParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSetPredicate([NotNull] BooleanExprParser.SetPredicateContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NullCheckPredicate</c>
	/// labeled alternative in <see cref="BooleanExprParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullCheckPredicate([NotNull] BooleanExprParser.NullCheckPredicateContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BooleanVariablePredicate</c>
	/// labeled alternative in <see cref="BooleanExprParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanVariablePredicate([NotNull] BooleanExprParser.BooleanVariablePredicateContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BooleanExprParser.valueList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValueList([NotNull] BooleanExprParser.ValueListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="BooleanExprParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValue([NotNull] BooleanExprParser.ValueContext context);
}
